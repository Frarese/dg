#!/usr/bin/python

from subprocess import call
from sys import argv, stderr, stdout, exit
from os.path import isfile, join, dirname, basename

def err(msg):
    stdout.flush()
    stderr.flush()
    stderr.write('[dgtool]: ' + msg + '\n')
    exit(1)

def printcmd(cmd):
    print('> {0}'.format(' '.join(cmd)))

prog=None
clang='clang'
link='llvm-link'

clangcmd=[clang, '-emit-llvm', '-c', '-g']
cmd=[]
files=[]
bcfiles=[]

def get_tool(prog):
    if isfile(prog):
        prog= './{0}'.format(prog)
    else:
        d = dirname(argv[0])
        p = join(d, prog)
        if isfile(p):
            prog = p
    return prog

###
# Build the commands
next_is_clang=False
for x in argv[1:]:
    if next_is_clang:
        clangcmd.append(x)
        next_is_clang = False
    elif x == '-Xclang':
        next_is_clang = True
    elif x.endswith('.c') or x.endswith('.cpp') or x.endswith('.i'):
        files.append(x)
    elif x.endswith('.bc') or x.endswith('.ll'):
        bcfiles.append(x)
    else:
        if not cmd:
            cmd.append(get_tool(x))
        else:
            cmd.append(x)

###
# Try to find the right path to the program
if not cmd:
    err('no command given')

def repl_suffix(fl):
    f = basename(fl)
    if f.endswith('.c') or f.endswith('.i'):
        return '{0}.bc'.format(f[:-2])
    elif f.endswith('.cpp'):
        return '{0}.bc'.format(f[:-4])

if len(files) < 1 and len(bcfiles) < 1:
    err('No input files given')

###
# Issue clang to compile sources to bitcode(s)
clangcmd += files
bitcodes = bcfiles + list(map(repl_suffix, files))
bitcode = None

printcmd(clangcmd)
r = call(clangcmd)
if r != 0:
    err('clang command return non-zero status')

###
# Link multiple files if needed
if len(bitcodes) > 1:
    bitcode='bitcode.bc'
    linkcmd=[link, '-o', bitcode] + bitcodes

    printcmd(linkcmd)
    r = call(linkcmd)
    if r != 0:
        err('llvm-link command return non-zero status')

else:
    bitcode = bitcodes[0]

###
# Run to tool
cmd.append(bitcode)
printcmd(cmd)

r = call(cmd)
if r != 0:
    err('command return non-zero status')
